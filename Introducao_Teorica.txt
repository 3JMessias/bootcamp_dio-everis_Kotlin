01 - Valores maximos dos tipos de variáveis

	fun main() {
		println("Hello, world!!!")
		println(Int.MAX_VALUE)
		println(Long.MAX_VALUE)
		println(Float.MAX_VALUE)
		println(Double.MAX_VALUE)
		println(Byte.MAX_VALUE)
		println(Short.MAX_VALUE)
	}
===========SAÍDA==================
	Hello, world!!!
	2147483647
	9223372036854775807
	3.4028235E38
	1.7976931348623157E308
	127
	32767
==================================
####################################################

02 - Declaracao de variáveis

* Var (valor mutável, padrão de nomenclatura camelCase): 
	- Valor definido e alterado durante a execução
* Val (calor imutável, padrão de nomenclatura camelCase): 
	- Valor definido durante a execução
	- Variável que terá somente o valor atribuído:
* Const Val (valor imutável, padrão de nomenclatura SNAKE_CASE):
	- Constante cujo valor é atribuído durante compilação.
	- Valor definido durante a compilação
	
	Exemplo:

	var currentAge = 22
	var currentAge:Int?			currentAge = null ou 22 //valor pode ser null ou inteiro
	
	val currentAge = 22
	val currentAge:Int?	
	
	const val MIN_AGE = 16
	const val MAX_AGE = 68
	
	
####################################################
03 - Possíveis erros

	var currentAge
	currentAge = 22 //ERRO!			A variável precisa ser iniciada ou receber a referência do seu tipo.
	
	var currentYear = "Ano"			A variável foi iniciada com o tipo String e foi tentado atribuir um valor inteiro na mesma.
	currentYear = 2021 //ERRO!
	
####################################################
04 - Operadores Aritmétricos

=====Função	==== Expressão	===== Comando ====== Atribuição
	soma		 a + b			 a.plus(b)		 a += b
	subtração	 a - b			 a.minus(b)		 a -= b
	multiplic	 a * b			 a.times(b)		 a *= b
	divisao		 a / b			 a.div(b)		 a /= b
	resto		 a % b			 a.mod(b)		 a %= b

####################################################
04 - Operadores Comparativos

maior/menor			a > b ou a < b					a.compareTo(b) > 0 ou a.compareTo(b) < 0 
	//				retorna valor booleano			# Retorna -1(menor), 0(igual) ou 1(maior)
	
maior/menor	igual		a >= b ou a <= b						a.compareTo(b)
	//					# retorna valor booleano				# Retorna -1(menor), 0(igual) ou 1(maior)
	
igual					a == b							a.equals(b)		# retorna valor booleano		

diferente				a != b							!(a.equals(b))		# retorna valor booleano		
		

####################################################
04 - Operadores Lógicos
	E(&&) 		(expressão1) && (expressão2)		Recomendação colocar a expressão entre parênteses
	OU (||)		(expressão1) || (expressão2)		Recomendação colocar a expressão entre parênteses

05 - Operadores In e Range
	
	Exemplo:
		fun main() {
		val bingo = listOf(8,6,2,13)
		var number = (1..34).random() //range de números
		  
		println(number)
		println(number in bingo) //retorna se number existe em bingo (booleano)
    
		}
		
	Exemplo02:
		const val MIN_AGE = 16
		const val MAX_AGE = 68
		fun main() {
			var age = (10..100).random()
			  
			println(age)
			//As duas comparações são similares
			println(age in MIN_AGE..MAX_AGE)
			println(age >= MIN_AGE && age <= MAX_AGE)    
		}

###################################################
06 - Manipulando Strings
	
	* Pode ser concatenado com plus/+
	* Também é tratada como um array de Char
	
	Para acessar as posições:
	First(), last(), String.length, String[index]
	
	Concatenação:
	
	Exemplo:
	const val NAME = "Ana"
	const val S = "olá"
	fun main() {
		println(S.plus(NAME))
		println(S + NAME)
		println("$S $NAME")
		println("Bem vindo(a) $NAME!") --  usa-se o $ para o uso de variável entre as aspas
		//Interpolação entre duas variáveis - As chaves são necessárias toda vez que se for manipular uma variável.
		println("${S.capitalize()} $NAME, tudo bem?")
	}

	Métodos:
	- capitalize() 		= transforma a primeira letra de uma string em 'Maiusculo'
	- toUpperCase() 	= Transforma a string toda para CAIXA ALTA
	- toLowerCase()		= Transforma a string toda para caixa baixa
	- decapitalize()	= contrário do capitalize(), transforma a primeira letra de uma string em 'Minusculo'
	- trimEnd()			= Remove espaços vazios e caracteres inadequados para Impressão do final da string
	- trimStart()			= Remove espaços vazios e caracteres inadequados para Impressão do início da string
	- trim()			= Remove espaços vazios e caracteres inadequados para Impressão do inicio e do final da string
	- replace(a, b)		= Substituir caracteres por outro
	
	Exemplo:
	
	const val NAME = "ana Maria Braga "
	const val S = " Ana Maria Braga "
	fun main() {
		println("Original: " + S)
		println("TrimEnd: " + S.trimEnd())
		println("TrimStart: " + S.trimStart())
		println("Trim: " + S.trim())
		println("Replace: " + S.replace("M", "F"))
	}

	Empty X Blank
	
	- Se o tamanho da string (s.length) for 0 está empty e Blank;
	- Se o tamanho for > 0 mas todos os caracteres são espaços em branco, está Blank mas não empty;







